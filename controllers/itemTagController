const asyncHandler = require("express-async-handler");
const { body, validationResult } = require("express-validator");

// Models
const ItemTag = require("../models/itemTagModel");
const InventoryItem = require("../models/inventoryItemModel");

// @desc Get all tags
// @route GET /inventory/itemtags/
// @access Private
exports.itemtag_all = asyncHandler(async (req, res, next) => {
  try {
    const itemTags = await ItemTag.find();
    res.json(itemTags);
  } catch (error) {
    res.status(400).json({ error: error.message });
  }
});

// @desc Get one tag and return the information
// @route GET /inventory/itemtag/:id
// @access Private
exports.itemtag_detail = asyncHandler(async (req, res, next) => {
  try {
    const itemTag = await ItemTag.findById(req.params.id);
    if (!itemTag) {
      return res.status(404).json({ error: "Inventory item not found" });
    }
    res.json(itemTag);
  } catch (error) {
    res.status(400).json({ error: error.message });
  }
});

// @desc Render the form for creating a new Item Tag
// @route GET /inventory/itemtag/create
// @access Private
exports.create_itemtag_get = asyncHandler(async (req, res, next) => {
  res.send("GET new Inventory Item not yet implemented");
});

// @desc Create a new Item Tag
// @route POST /inventory/itemtag/create
// @access Private
exports.create_itemtag_post = [
  // Validate and Sanitize fields
  body("tagName")
    .trim()
    .isLength({ min: 1 })
    .escape()
    .withMessage("Tag Name must be specified"),

  // Process request after validation and sanitazion
  asyncHandler(async (req, res, next) => {
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      return res.status(400).json({ errors: errors.array() });
    }

    try {
      const newTag = new ItemTag(req.body);
      await newTag.save();
      res.status(201).json(newTag);
    } catch (error) {
      res.status(400).json({ error: error.message });
    }
  }),
];

// @desc Delete an Item Tag
// @route GET /inventory/itemtag/:id/delete
// @access Private
exports.delete_itemtag_get = (req, res, next) => {
  res.send("Delete Item Tag not yet implemented");
};

// @desc Delete an Item Tag
// @route POST /inventory/itemtag/:id/delete
// @access Private
exports.delete_itemtag_post = asyncHandler(async (req, res, next) => {
  try {
    const itemTag = await ItemTag.findById(req.params.id);
    const inventoryItems = await InventoryItem.find({ tags: req.params.id });

    if (!itemTag) {
      // Item Tag is not found
      return res.status(404).json({ error: "Item Tag not found" });
    }

    if (inventoryItems.length > 0) {
      // Tag is currently used by other items
      return res.status(409).json({
        error: "Tag is currently in use by an Item",
        inventoryItems,
      });
    }

    const itemTags = await ItemTag.find();
    await ItemTag.findByIdAndDelete(req.params.id);
    res.redirect("/inventory/itemtags");
  } catch (err) {
    res.status(400).json({ error: err.message });
  }
});

// @desc Update an Item Tag
// @route GET /inventory/itemtag/:id/update
// @access Private
exports.update_itemtag_get = (req, res, next) => {
  res.send("Update Item Tag not yet implemented");
};

// @desc Update an Item Tag
// @route POST /inventory/itemtag/:id/update
// @access Private
exports.update_itemtag_post = (req, res, next) => {
  res.send("Update Item Tag not yet implemented");
};
